<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Jonghwan Yoon</title>
    <link>https://jonghwanyoon.github.io/</link>
    
    <atom:link href="https://jonghwanyoon.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>기록용 블로그 입니다.</description>
    <pubDate>Sun, 25 Feb 2024 06:28:06 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>htslib과 samtools를 windows에서 compile 하기</title>
      <link>https://jonghwanyoon.github.io/2024/02/24/compile-samtools-on-windows/</link>
      <guid>https://jonghwanyoon.github.io/2024/02/24/compile-samtools-on-windows/</guid>
      <pubDate>Sat, 24 Feb 2024 02:18:46 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h1 id=&quot;머리말&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#머리말&quot;&gt;&lt;/a&gt; 머리말&lt;/h1&gt;
&lt;p&gt;Samtools를 windows에서 exe 파일로 compile 하는 과정 정리.&lt;/p&gt;</description>
        
      
      
      
      <content:encoded><![CDATA[<p><br><br><br></p><h1 id="머리말"><a class="markdownIt-Anchor" href="#머리말"></a> 머리말</h1><p>Samtools를 windows에서 exe 파일로 compile 하는 과정 정리.</p><p>htslib과 samtools에서 공식적으로 제공한다. 하지만, 문서가 파편화되어 보인다.</p><p>한국어로는 정리된게 없으므로 정리해본다.</p><p><strong>순서</strong>는 다음과 같다.</p><ol><li>MSYS2 환경을 만들고, samtools에 필요한 tool과 library를 설치한다.</li><li>htslib과 samtools의 git source를 받고 compile 한다.</li></ol><p><br><br></p><h1 id="1-msys2-설치"><a class="markdownIt-Anchor" href="#1-msys2-설치"></a> 1. MSYS2 설치</h1><p>MSYS2 환경을 설치해야한다. 아래 링크에서 install파일을 받고 설치한다.<br /><br></p><p><a href="https://www.msys2.org/">https://www.msys2.org/</a></p><img width=700 src=/images/compile-samtools-on-windows_fig1_msys2.png><p><br><br></p><p>⭐ 설치 디렉토리는 compile된 samtools도 포함될 예정이므로 기억해두자. 나의 경우에는 아래와 같다.</p><img width=700 src=/images/compile-samtools-on-windows_fig2.png><p><br><br></p><p>설치가 끝나면 <strong>실행하지 않고 종료하자</strong>. 실행했다면, MSYS2 ucrt64 터미널이 열리는데 닫아주자.</p><blockquote><p>samtools contributer가 MingGW64를 언급해서 해당 환경만 해보았다.</p></blockquote><p><br><br></p><h1 id="2-msys2-mingw64-실행"><a class="markdownIt-Anchor" href="#2-msys2-mingw64-실행"></a> 2. MSYS2 MINGW64 실행.</h1><p>windows 키를 누르고 MSYS2 MINGW64 입력하면 터미널 실행이 된다.</p><img width=700 src=/images/compile-samtools-on-windows_fig3_terminal.png><blockquote><p>MSYS2가 windows에서 POSIX 실행 환경을 제공하는 cygwin을 기반으로 구성되어 있기 때문에, 왠만한 linux 커맨드는 다 된다.</p></blockquote><p><br><br></p><h1 id="3-msys2-mingw64에서-필요한-라이브러리-설치"><a class="markdownIt-Anchor" href="#3-msys2-mingw64에서-필요한-라이브러리-설치"></a> 3. MSYS2 MINGW64에서 필요한 라이브러리 설치</h1><p>MSYS2에서는 pacman 소프트웨어 매니저를 사용한다.</p><p>아래 명령어로, 빌드에 필요한 tool과 library를 설치한다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pacman -S --noconfirm mingw-w64-x86_64-autotools mingw-w64-x86_64-toolchain mingw-w64-x86_64-curl mingw-w64-x86_64-zlib mingw-w64-x86_64-bzip2 mingw-w64-x86_64-xz mingw-w64-x86_64-ncurses git</span><br></pre></td></tr></table></figure><blockquote><p>약 1200MiB 공간이 필요하다.</p></blockquote><p><strong>옵션 설명</strong></p><ul><li><code>-S</code> 는 sync라는 옵션으로 설치, 업그레이드 등에 사용된다.</li><li><code>--noconfirm</code>은 설치 동의를 묻지 않게 해준다.</li></ul><p><strong>설치 항목 설명</strong></p><ul><li><code>mingw-w64-x86_64-autotools</code>: MSYS2에서 compile에 사용할 autoheader과 autoconfig를 설치해준다.</li><li><code>mingw-w64-x86_64-toolchain</code>: compiler 관련된 도구들을 설치해준다.</li><li><code>mingw-w64-x86_64-curl</code>, <code>mingw-w64-x86_64-zlib</code>, <code>mingw-w64-x86_64-bzip2</code>, <code>mingw-w64-x86_64-xz</code>, <code>mingw-w64-x86_64-ncurses</code> : htslib, samtools에 필요한 library들.</li><li><code>git</code></li></ul><p><br><br></p><h1 id="4-htlib-및-samtools-설치"><a class="markdownIt-Anchor" href="#4-htlib-및-samtools-설치"></a> 4. htlib 및 samtools 설치</h1><h2 id="htslib-compile"><a class="markdownIt-Anchor" href="#htslib-compile"></a> htslib Compile</h2><p>나는 user 경로에서 진행했다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br></pre></td></tr></table></figure><p>git clone 및 compile은 아래 과정으로 진행된다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b master https://github.com/samtools/htslib</span><br><span class="line"><span class="built_in">cd</span> htslib</span><br><span class="line"></span><br><span class="line"><span class="comment"># htscodecs 서브 모듈 설치</span></span><br><span class="line">git submodule update --init --recursive</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># autoconf는 2.69 버전으로 돌려준다.</span></span><br><span class="line">autoheader &amp;&amp; autoconf-2.69 &amp;&amp; ./configure &amp;&amp; make -j4 &amp;&amp; make install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 혹은 아래를 이용한다.</span></span><br><span class="line"><span class="comment"># autoheader &amp;&amp; autoconf &amp;&amp; ./configure &amp;&amp; make -j4 &amp;&amp; make install</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>아직 잘 모르는점. autoconf를 실행하면 2.72 버전 (최신)이 실행되는데, 이걸로는 compile이 되지 않는다. 여기서는 2.69 버전을 실행하면 정상적으로 된다.</p></blockquote><h2 id="samtools-compile"><a class="markdownIt-Anchor" href="#samtools-compile"></a> Samtools Compile</h2><p>나는 user 경로에서 진행했다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br></pre></td></tr></table></figure><p>git clone 및 compile은 아래 과정으로 진행된다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b master https://github.com/samtools/samtools</span><br><span class="line"><span class="built_in">cd</span> samtools</span><br><span class="line"></span><br><span class="line">autoheader &amp;&amp; autoconf &amp;&amp; ./configure &amp;&amp; make -j4 &amp;&amp; make install</span><br></pre></td></tr></table></figure><blockquote><p>🎈compile 과정에서 아래의 warning이 나타날 수 있지만 무시해도 된다. <a href="https://github.com/samtools/samtools/issues/689#issuecomment-308400164">github:samtools:autoconf warnings</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">configure.ac:64: warning: _AC_CONFIG_SUBDIRS: you should use literals</span><br><span class="line">../autoconf-2.72/lib/autoconf/status.m4:1096: AC_CONFIG_SUBDIRS is expanded from...</span><br><span class="line">m4/ax_with_htslib.m4:55: AX_WITH_HTSLIB is expanded from...</span><br><span class="line">configure.ac:64: the top level</span><br></pre></td></tr></table></figure></blockquote><p>이 과정을 통해 <code>samtools.exe</code> 가 생성되며, 정상 작동한다.</p><img width=700 src=/images/compile-samtools-on-windows_fig4_samtools_run.png><p><br><br></p><h1 id="5-windows에서-사용하기"><a class="markdownIt-Anchor" href="#5-windows에서-사용하기"></a> 5. windows에서 사용하기</h1><p>exe 파일을 <code>powershell</code>과 <code>cmd</code>에서 써보자.</p><p>위 1번의 MSYS2를 설치한 경로 하위에서, samtools는 아래 2개 경로에 위치한다.</p><ol><li><code>D:\msys64\home\&#123;username&#125;\samtools</code></li><li><code>D:\msys64\mingw64\bin</code></li></ol><p>두 경로로 가보면 samtools가 있음을 확인할 수 있다.</p><img width=700 src=/images/compile-samtools-on-windows_fig5_windows_path.png><p><br><br></p><p>이 경로 그대로 terminal에서 실행 가능하다.</p><img width=700 src=/images/compile-samtools-on-windows_fig6_powershell.png><p><br><br></p><h2 id="path-설정하기"><a class="markdownIt-Anchor" href="#path-설정하기"></a> PATH 설정하기</h2><p>MSYS2를 이용하면 linux에서만 compile 가능하던 binary를 windows에서 사용할 수 있다.</p><p>좀더 편하게 쓰기 위해 PATH를 설정해보았다.</p><p><strong>설정</strong></p><ol><li><code>내 PC</code> 우클릭 후 <code>속성</code> 선택</li><li><code>고급 시스템 설정</code> 선택</li><li><code>고급</code> 탭의 <code>환경 변수</code> 선택</li><li><code>사용자에 대한 사용자 변수</code> 에서 <code>Path</code>를 선택하고 <code>편집</code> 클릭</li><li><code>새로 만들기</code>를 선택하고 <code>D:\msys64\mingw64\bin</code> 입력</li></ol><p>이제 MSYS2의 파일도 path에 추가되었으므로, terminal에서 <code>samtools</code> 명령어로 접근 가능하다.</p><img width=700 src=/images/compile-samtools-on-windows_fig7_windows_samtools_path_added.png><p><br><br></p><h1 id="테스트"><a class="markdownIt-Anchor" href="#테스트"></a> 테스트</h1><p>samtools view</p><img width=700 src=/images/compile-samtools-on-windows_fig8_samtools_view.png><p><br><br></p><h1 id="맺음말"><a class="markdownIt-Anchor" href="#맺음말"></a> 맺음말</h1><ul><li>MSYS2의 사용방법을 배웠다. 유용하게 사용할 수 있을 것 같다.</li><li>이번 htslib &amp; samtools 설치로, windows compile이 가능해지니  htslib을 binding하는 다른 언어의의 library에서도 편하게 사용이 가능하다. (조금 수정이 필요할 순 있다)</li></ul><p><br><br><br></p><p><strong>Reference</strong></p><ol><li><a href="https://github.com/samtools/htslib">https://github.com/samtools/htslib</a></li><li><a href="https://github.com/samtools/samtools">https://github.com/samtools/samtools</a></li><li><a href="https://github.com/samtools/htslib/issues/907">https://github.com/samtools/htslib/issues/907</a></li><li><a href="https://github.com/samtools/samtools/issues/689#issuecomment-308400164">https://github.com/samtools/samtools/issues/689#issuecomment-308400164</a></li></ol>]]></content:encoded>
      
      
      <category domain="https://jonghwanyoon.github.io/categories/Bioinformatics/">Bioinformatics</category>
      
      
      <category domain="https://jonghwanyoon.github.io/tags/samtools-htslib/">samtools,htslib</category>
      
      
      <comments>https://jonghwanyoon.github.io/2024/02/24/compile-samtools-on-windows/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>(책) Plotly로 시작하는 인터랙티브 데이터 시각화 in R &amp; Python</title>
      <link>https://jonghwanyoon.github.io/2024/01/04/book-plotly-interactive-visualization/</link>
      <guid>https://jonghwanyoon.github.io/2024/01/04/book-plotly-interactive-visualization/</guid>
      <pubDate>Thu, 04 Jan 2024 12:59:44 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;center&gt;
&lt;img src=https://contents.kyobobook.co.kr/sih/fit-in/458x0/pdt/9791192987378.jpg width=250&gt;
&lt;p&gt;&lt;font color=&quot;gra</description>
        
      
      
      
      <content:encoded><![CDATA[<p><br><br><br></p><center><img src=https://contents.kyobobook.co.kr/sih/fit-in/458x0/pdt/9791192987378.jpg width=250><p><font color="gray">이기준 저, Jpub 출판</font></p></center><p><br><br></p><center><li>Plotly를 이용한 다양한 시각화 방법을 소개하는 책입니다.</li><li>적절한 시각화 선택 방법과 차트 생성 기법을 Python과 R로 세세히 익힐 수 있습니다.</li><li>사전처럼 옆에 두고 필요할 때 펼쳐보기 좋습니다. </li></center><br><hr /><br><p>책을 선택할 때에는 목차가 제일 중요하다 생각합니다만, 표지의 첫 인상도 중요하다고 생각합니다. 데이터 시각화 또한 데이터 스토리텔링의 결과물을 보여줄 때 시각적인 차트를 보여주면 청중의 흡입력이 좋아짐을 느낍니다. Plotly는 데이터 과학에서 인터랙티브 데이터 시각화의 대표적인 도구로써 미려한 시각화를 간편히 만들수 있습니다. 이 책은 Plotly를 이용한 시각화에 대한 방법 전반을 소개하는 가이드북입니다.</p><br><p>Plotly는 plotly.js를 기반으로 하며 Python과 R 같은 다양한 프로그래밍 언어에서 사용할 수 있습니다. 시각화 도구의 본질인 차트부터, 실시간 반응성을 확인해야하는 대시보드 까지 원하는 시각화가 가능하며, 저와 같은 데이터를 다루는 데이터 과학자/데이터 분석가에게 특히 유용합니다.</p><p>참고로, plotly는 graph_objects 와 express 두 가지 모듈을 사용할 수 있는데, 이 책은 graph_objects 중심으로 소개하고 있습니다. graph_objects는 차트를 세세하게 제어할 수 있는 반면 express는 쉽게 그릴 수 있지만 세부속성 조정이 어렵고 경우에 따라서는 원하는대로 되지 않을 수 있습니다. 따라서 책처럼 graph_objects로 시작하는 것이 좋습니다.</p><br><p>이 책은 시각화에 대한 개요와 효과적인 시각화 기법을 소개합니다. 기초부터 고급 기술까지 다양한 차트를 다루며, 어떤 상황에 어떤 차트를 사용하는지에 대한 고민이 있으시다면 이 책이 좋은 가이드가 될 것입니다. 특히 파트 III에서는 시각화 종류를 큰 카테고리로 묶어서 목차를 제공해주기 때문에 목차를 펼치기만 해도 어떤 시각화 기법을 사용할 지에 대한 선택에 도움을 주는 느낌을 받았습니다.</p><br><p>책의 주제처럼 plotly를 사용한 차트 구현 방법과 실제 예시를 상세히 알려줍니다. 각 차트에 대한 개요와 설명을 알려주고, 해당 차트를 이용한 시각화를 함에 있어 저자의 팁과 주의사항을 설명하여 효과적인 표현 방법을 상세히 전달해 줍니다. 또한, 예시 데이터와 함께 R과 Python 코드 예시를 담았고 그에 대한 해설을 제공하기 때문에, 실제로 구현하시는 데 도움이 됩니다.</p><br><p>그리고, 만들어진 차트를 배포하는 다양한 방식을 다룹니다. 이미지 파일로 저장하는 방법부터, 인터랙티브 차트를 온/오프라인에서 제공하는 방법까지 다양한 선택지를 제시합니다. 게다가, Dash와 Shiny를 사용하여 대시보드를 만드는 방법도 소개하고 있는데, 웹 어플리케이션을 구축하는데 유용하며 대시보드 뿐만 아니라 특정 목적을 위한 웹사이트를 만드는데에도 사용되므로, 웹을 통한 대시보드 구현이 관심이 있으시다면 도움이 될 것입니다.</p><p><br><br></p><center>📕</center><br>]]></content:encoded>
      
      
      <category domain="https://jonghwanyoon.github.io/categories/%EC%B1%85/">책</category>
      
      
      <category domain="https://jonghwanyoon.github.io/tags/%EC%B1%85/">책</category>
      
      <category domain="https://jonghwanyoon.github.io/tags/%EB%A6%AC%EB%B7%B0/">리뷰</category>
      
      
      <comments>https://jonghwanyoon.github.io/2024/01/04/book-plotly-interactive-visualization/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>(책) 코딩 인터뷰 완전분석</title>
      <link>https://jonghwanyoon.github.io/2023/07/13/book-cracking-the-coding-interview/</link>
      <guid>https://jonghwanyoon.github.io/2023/07/13/book-cracking-the-coding-interview/</guid>
      <pubDate>Thu, 13 Jul 2023 11:50:00 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;center&gt;
&lt;img src=https://contents.kyobobook.co.kr/sih/fit-in/458x0/pdt/9788966263080.jpg width=250&gt;
&lt;p&gt;&lt;font color=&quot;gra</description>
        
      
      
      
      <content:encoded><![CDATA[<p><br><br><br></p><center><img src=https://contents.kyobobook.co.kr/sih/fit-in/458x0/pdt/9788966263080.jpg width=250><p><font color="gray">게일 라크만 맥도웰 저</font></p></center><p><br><br></p><p>해외 대기업들의 코딩 인터뷰 바이블로 유명한 <strong>Cracking the coding interview</strong>의 한글판.</p><br><p>사실 읽은지는 시간이 조금 되었다. 당시에 알고리즘 개발 업무를 하고 있어서, 공부를 위해 코딩 문제 사이트들을 이용하였다. (백준, 로잘린드 등) 그런데 공부하는 내용이 범위가 넓어서인지 뭔가 정리가 잘 되지않았었다. 새로운 문제를 맞이할 때마다 정리하면서 배울 필요가 있다고 느꼈고, 어떻게 공부할까 강의와 도서를 알아보다가 발견한 것이 바로 이 책이다.</p><br><p><strong>책의 구성</strong>에서 자료구조, 알고리즘 분야는 여타 다른 인터뷰 책과 비슷하다. (주제마다 이론적인 설명을 해주고 문제를 준다) 추가로, 여기에는 추가로 시스템 설계, 소프트웨어 테스팅, C, C++, Java, 데이터베이스 (SQL) 같은 주제도 포함되어 있다는 점이 좋았다.</p><br><p>게다가 이 책의 두드러지는 <strong>장점</strong>은 정확하고 효율적이고 합리적인 사고를 기를 수 있게 해준다. 알고리즘에 대해서 어떻게 공부하는지, 주제마다 문제의 범주를 알려주고, 트레이닝 순서와 사고방식은 어떻게 해야 개발자로써 좋은지까지도 알려준다.</p><br><p><strong>연습 문제</strong>들은 쉬운 것도 있지만 대부분 난이도가 있었고 다양하게 풀 수 있도록 한다. 이 책의 큰 장점인데, <strong>해설</strong>이 정말 상세하다. 쉬운 해결방법부터 가장 효율적인 해결 방법까지, 필요하다면 최적화에 대한 사고가 어떻게 진행되는지도 알려준다. 이 책이 900페이지 정도인데 500페이지 이상이 해설이다. (힌트를 제외하고도)</p><br><p>또, 좋았던 점 중 하나는 힌트가 있다는 것이다. 문제마다 힌트가 1~5개 정도 있다. 막혔을때 힌트를 순서대로 보면 접근을 어떻게 해야 하는지 알려준다. 게다가 힌트들의 순서를 무작위로 섞어놔서 다음 문제의 힌트를 우연하게 볼 수 없도록 하였다.</p><p><br><br></p><p>추후 언젠가 한 번쯤은 다시 펴볼일이 있을 것 같다.</p><p><br><br></p><p>🗨️ 여담으로, 처음에는 책이 분량도 많고 푸는데도 너무 어려웠는데, 마침 이 책을 이용하는 <strong>스터디</strong>가 있어서 참여했었다. 스터디원은 모두 실력이 뛰어난 분들이었고, 그런 분들과 여럿이서 인터뷰 하듯이 진행하니 효율이 뛰어났다. 수 개월 동안 진행했었는데, 이 스터디가 엄청 도움이 되었다. 추후 공부에 스터디와 도서를 적극 활용하는 계기가 되었다.</p><p><br><br></p><center>📕</center><br>]]></content:encoded>
      
      
      <category domain="https://jonghwanyoon.github.io/categories/%EC%B1%85/">책</category>
      
      
      <category domain="https://jonghwanyoon.github.io/tags/%EC%BD%94%EB%94%A9-%EC%9D%B8%ED%84%B0%EB%B7%B0/">코딩 인터뷰</category>
      
      <category domain="https://jonghwanyoon.github.io/tags/%EC%B1%85/">책</category>
      
      <category domain="https://jonghwanyoon.github.io/tags/%EB%A6%AC%EB%B7%B0/">리뷰</category>
      
      
      <comments>https://jonghwanyoon.github.io/2023/07/13/book-cracking-the-coding-interview/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Hexo에서 Github pages의 deploy fail시 .nojekyll을 추가하자.</title>
      <link>https://jonghwanyoon.github.io/2023/07/03/you-must-add-nojekyll-in-hexo/</link>
      <guid>https://jonghwanyoon.github.io/2023/07/03/you-must-add-nojekyll-in-hexo/</guid>
      <pubDate>Mon, 03 Jul 2023 13:29:13 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;나는 블로그를 Hexo를 이용해 관리한다.&lt;/p&gt;
&lt;p&gt;오랜만에 블로그 글 정리하고 진행하는데, deploy가 실패했다.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;center&gt;
&lt;img width=600px src=/im</description>
        
      
      
      
      <content:encoded><![CDATA[<p><br><br></p><p>나는 블로그를 Hexo를 이용해 관리한다.</p><p>오랜만에 블로그 글 정리하고 진행하는데, deploy가 실패했다.</p><p><br><br></p><center><img width=600px src=/images/nojekyll_deploy_failure.png><br><font color=gray>왜...?<br></font></center><p><br><br></p><br>가장 먼저 나타난 에러 문구<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">TypeError:</span> <span class="string">Converting</span> <span class="string">circular</span> <span class="string">structure</span> <span class="string">to</span> <span class="string">JSON</span></span><br><span class="line">    <span class="string">--&gt;</span> <span class="string">starting</span> <span class="string">at</span> <span class="string">object</span> <span class="string">with</span> <span class="string">constructor</span> <span class="string">&#x27;TLSSocket&#x27;</span></span><br><span class="line">    <span class="string">|</span>     <span class="string">property</span> <span class="string">&#x27;_httpMessage&#x27;</span> <span class="string">-&gt;</span> <span class="string">object</span> <span class="string">with</span> <span class="string">constructor</span> <span class="string">&#x27;ClientRequest&#x27;</span></span><br><span class="line">    <span class="string">---</span> <span class="string">property</span> <span class="string">&#x27;socket&#x27;</span> <span class="string">closes</span> <span class="string">the</span> <span class="string">circle</span></span><br></pre></td></tr></table></figure><p><br><br></p><p>잘 모르는 상태에서 이 에러에 대해 열심히 찾아보았으나, 아주 쉬운 해결책을 발견했다.</p><p>이 사태의 원인은 hexo의 _config.yml을 보고 github에서 &quot;이거 jekyll이네~&quot;라고 인식하여 jekyll처럼 배포하려다 에러가 난다.</p><p>따라서, github에 jekyll이 아니다 라는것을 알려주는 것으로 root에 “.nojekyll”라는 빈 파일을 추가해야한다.</p><p>해당 Github 답변 링크는 다음과 같다: <a href="https://github.com/hexojs/hexo/issues/3212">Github Issue</a></p><p><br><br></p><p>해결하려면 단순한 configuration이 필요하다. <a href="https://hexo.io/docs/configuration.html">Configuration | Hexo</a></p><p>_config.yml에서 include 하위에 “.nojekyll”을 추가해준다.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">include:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;.nojekyll&quot;</span></span><br></pre></td></tr></table></figure><p><br><br></p><center><img width=600px src=/images/nojekyll_deploy_success.png><br><font color=gray>Deploy가 된다.<br></font></center><p><br><br></p><p>예전에는 잘 되던게 안되니 이해가 되지 않아서 시간을 꽤 소비했다.</p><br><p>갑자기 이런 현상이 나타나게한 나의 행동을 추측해보면…</p><ul><li>WSL 버전을 1과 2를 몇 번 왔다갔다 해서.</li><li>npm에서 업데이트 몇 가지를 했기 때문.</li></ul><p>정도일 것 같다.</p><p><br><br></p><p>그냥 두려다가 왠지 나중에 기억안나서 고생할까봐 + 필요하신 분이 있으실까봐 정리한다.</p><p><br><br></p>]]></content:encoded>
      
      
      <category domain="https://jonghwanyoon.github.io/categories/Hexo/">Hexo</category>
      
      
      <category domain="https://jonghwanyoon.github.io/tags/Hexo/">Hexo</category>
      
      
      <comments>https://jonghwanyoon.github.io/2023/07/03/you-must-add-nojekyll-in-hexo/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>(책) 혼자 공부하는 C언어 정리</title>
      <link>https://jonghwanyoon.github.io/2023/07/03/hongong-10th-summary/</link>
      <guid>https://jonghwanyoon.github.io/2023/07/03/hongong-10th-summary/</guid>
      <pubDate>Sun, 02 Jul 2023 15:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;strong&gt;혼자 공부하는 C언어&lt;/strong&gt; 를 공부한 내용을 정리합니다.&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;&lt;a href=&quot;https://jonghwanyoon.github.io/2023/07/03/hongong-10th-intro/&quot;&gt;시작하는 글&lt;</description>
        
      
      
      
      <content:encoded><![CDATA[<p><strong>혼자 공부하는 C언어</strong> 를 공부한 내용을 정리합니다.</p><br><p><a href="https://jonghwanyoon.github.io/2023/07/03/hongong-10th-intro/">시작하는 글</a><br /><a href="https://jonghwanyoon.github.io/2023/07/09/hongong-c-01/">1. CH1, CH2</a><br /><a href="https://jonghwanyoon.github.io/2023/07/16/hongong-c-02/">2. 변수와 연산자</a><br /><a href="https://jonghwanyoon.github.io/2023/07/23/hongong-c-03/">3. 선택문과 반복문</a><br /><a href="https://jonghwanyoon.github.io/2023/07/30/hongong-c-04/">4. 함수</a><br /><a href="https://jonghwanyoon.github.io/2023/08/13/hongong-c-05/">5. 배열</a><br /><a href="https://jonghwanyoon.github.io/2023/08/20/hongong-c-06/">6. 포인터</a><br /><br><br></p>]]></content:encoded>
      
      
      
      
      <comments>https://jonghwanyoon.github.io/2023/07/03/hongong-10th-summary/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>(책) 혼자 공부하는 ML/DL, SQL 정리</title>
      <link>https://jonghwanyoon.github.io/2023/03/09/hongong-9th-summary/</link>
      <guid>https://jonghwanyoon.github.io/2023/03/09/hongong-9th-summary/</guid>
      <pubDate>Thu, 09 Mar 2023 11:54:43 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;strong&gt;혼자 공부하는 머신러닝+딥러닝&lt;/strong&gt;, &lt;strong&gt;혼자 공부하는 SQL&lt;/strong&gt; 공부한 내용을 정리합니다.&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;&lt;a href=&quot;https://jonghwanyoon.github.io/2022/1</description>
        
      
      
      
      <content:encoded><![CDATA[<p><strong>혼자 공부하는 머신러닝+딥러닝</strong>, <strong>혼자 공부하는 SQL</strong> 공부한 내용을 정리합니다.</p><br><p><a href="https://jonghwanyoon.github.io/2022/12/28/hongong_intro/">시작하는 글</a></p><p><a href="https://jonghwanyoon.github.io/2023/02/19/hongong-outro/">마치는 글</a></p><h1 id="sql"><a class="markdownIt-Anchor" href="#sql"></a> SQL</h1><p><a href="https://jonghwanyoon.github.io/2023/01/04/hongon_s_01/">1. SQL | 데이터베이스와 SQL 맛보기</a><br /><a href="https://jonghwanyoon.github.io/2023/01/15/hongong_s_02/">2. SQL | 기본 문법📚</a><br /><a href="https://jonghwanyoon.github.io/2023/01/22/hongong_s_03/">3. SQL | Data Type, JOIN, Programming</a><br /><a href="https://jonghwanyoon.github.io/2023/02/05/hongong-s-04/">4. SQL | 테이블 생성, 제약조건, 뷰</a><br /><a href="https://jonghwanyoon.github.io/2023/02/12/hongong-s-05/">5. SQL | 인덱스 살펴보기</a><br /><a href="https://jonghwanyoon.github.io/2023/02/19/hongong-s-06/">6. SQL | Stored Procedure 및 Python 연결</a></p><br><h1 id="machine-learning"><a class="markdownIt-Anchor" href="#machine-learning"></a> Machine Learning</h1><p><a href="https://jonghwanyoon.github.io/2023/01/08/hongong_ml_01/">1. ML | 시작하기</a><br /><a href="https://jonghwanyoon.github.io/2023/01/15/hongonh_ml_02/">2. ML | 임의의 수치를 예측해보자 - Regression</a><br /><a href="https://jonghwanyoon.github.io/2023/01/24/hongong_ml_03/">3. ML | Logistic Regression과 Stochastic Gradient Descent</a><br /><a href="https://jonghwanyoon.github.io/2023/01/31/hongong-ml-04-md/">4. ML | Decision Tree, Cross validation, Ensemble</a><br /><a href="https://jonghwanyoon.github.io/2023/02/06/hongong-ml-05/">5. ML | K-means clustering, PCA</a><br /><a href="https://jonghwanyoon.github.io/2023/02/13/hongong-ml-06/">6. ML | 패션잡화 이미지의 분류를 해보자 - 인공신경망</a></p><p><br><br></p>]]></content:encoded>
      
      
      
      
      <comments>https://jonghwanyoon.github.io/2023/03/09/hongong-9th-summary/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Hexo에서 HTML 파일을 Markdown에 삽입하기</title>
      <link>https://jonghwanyoon.github.io/2023/01/11/hexo_embed_html/</link>
      <guid>https://jonghwanyoon.github.io/2023/01/11/hexo_embed_html/</guid>
      <pubDate>Wed, 11 Jan 2023 13:15:35 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Hexo에서 HTML 파일을 삽입하려 했는데 다음처럼 문제가 발생했습니다.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;iframe src=&quot;/html_render/test.html&quot; width=&quot;100%&quot; height=&quot;3</description>
        
      
      
      
      <content:encoded><![CDATA[<p><br><br></p><p>Hexo에서 HTML 파일을 삽입하려 했는데 다음처럼 문제가 발생했습니다.</p><p><br><br></p><iframe src="/html_render/test.html" width="100%" height="300" frameborder="0" loading="lazy" allowfullscreen></iframe><br><center><font style="color:gray;">iframe 안에 새로운 블로그가 펼쳐진다..!</font></center><p><br><br></p><p>원래는 단순 그래프만 보여야 하는데, HTML을 또 렌더링해서 테마 안에 그래프가 속하게 표시됩니다.</p><p>이러한 문제를 피하면서 HTML 파일을 넣는 순서는 다음과 같습니다.</p><p><br><br></p><h2 id="1-우선-마크다운에-html파일을-넣는-코드를-삽입합니다"><a class="markdownIt-Anchor" href="#1-우선-마크다운에-html파일을-넣는-코드를-삽입합니다"></a> 1. 우선 마크다운에 HTML파일을 넣는 코드를 삽입합니다.</h2><p>삽입하는 방법은 직접 iframe HTML 태그로 넣어주거나 Hexo 의 Tag Library를 이용하면 됩니다.</p><p>HTML iframe 태그로 넣어주기</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">width</span>=<span class="string">100%</span> <span class="attr">height</span>=<span class="string">500px</span> <span class="attr">src</span>=<span class="string">url</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><br><p>Hexo의 Tag library 이용하기</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% iframe url [width] [height] %&#125;</span><br></pre></td></tr></table></figure><br><h2 id="2-_configyml-에-skip_render-추가하기"><a class="markdownIt-Anchor" href="#2-_configyml-에-skip_render-추가하기"></a> 2. _config.yml 에 skip_render 추가하기</h2><p>HTML이나 json을 추가 시, 추가 렌더링을 하지 않도록 Hexo의 <code>_config.yml</code>에 <code>skip_render</code>를 추가해줍니다.</p><p>theme의 config가 아닌 블로그 경로에있는 <code>_config.yml</code>입니다.</p><p>저는 <code>source/html</code> 하위에 HTML 파일을 두고 관리할 예정이므로 아래처럼 지정해 주었습니다. 사용하시는 구조에 맞추어 변경하시면 됩니다.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">skip_render:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">html/*.html</span></span><br></pre></td></tr></table></figure><br><h2 id="3-페이지-확인하기"><a class="markdownIt-Anchor" href="#3-페이지-확인하기"></a> 3. 페이지 확인하기</h2><p><code>hexo s</code>를 실행하여 페이지를 다시 확인해보시면 됩니다. 인터넷에서는 여기서 해결된 분이 있는데 저는 안되서 다음 과정도 진행했습니다.</p><br><h2 id="3-dbjson-삭제하기"><a class="markdownIt-Anchor" href="#3-dbjson-삭제하기"></a> 3. db.json 삭제하기</h2><p>블로그 경로 내에 있는 <code>db.json</code>을 삭제해야 합니다.</p><blockquote><p>혹시 모르니 복사하고 테스트하시길 바랍니다.</p></blockquote><p>페이지 정보를 담은 파일인데, hexo가 해당 파일을 제대로 초기화 해주지 않습니다.</p><p>삭제를 해주면 알아서 현재 상태에 맞추어 갱신을 해줍니다.</p><br><h2 id="4-진짜-페이지-확인"><a class="markdownIt-Anchor" href="#4-진짜-페이지-확인"></a> 4. 진짜 페이지 확인</h2><p>다시 <code>hexo s</code>를 실행해 보니 아래처럼 HTML 파일이 잘 삽입되는 것을 확인 할 수 있습니다.</p><iframe src="/html/test.html" width="100%" height="550" frameborder="0" loading="lazy" allowfullscreen></iframe>]]></content:encoded>
      
      
      <category domain="https://jonghwanyoon.github.io/categories/Hexo/">Hexo</category>
      
      
      <category domain="https://jonghwanyoon.github.io/tags/Hexo/">Hexo</category>
      
      
      <comments>https://jonghwanyoon.github.io/2023/01/11/hexo_embed_html/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
